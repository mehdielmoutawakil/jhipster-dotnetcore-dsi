using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using <%= namespace %>.Application.Queries;
using <%= namespace %>.Domain.Entities;

namespace <%= namespace %>.Controllers
{
    [Authorize]
    [Route("api/Positions")]
    [ApiController]
    public class PositionController : ControllerBase
    {
        private readonly ILogger<PositionController> _log;
        private readonly IMediator _mediator;

        public PositionController(ILogger<PositionController> log, IMediator mediator)
        {
            _log = log;
            _mediator = mediator;
        }


        [HttpGet("search")]
        public async Task<ActionResult<PaginatedResult<Position>>> Search([FromQuery] IDictionary<string, string> queryParameters)
        {
            _log.LogDebug("REST request to get filtered Position");

            try
            {
                var (filters, pageNumber, pageSize, sort) = QueryParameterHelper.ProcessQueryParameters(queryParameters);

                var query = new PositionSearchQuery
                {
                    Filters = filters,
                    PageNumber = pageNumber,
                    PageSize = pageSize,
                    Sort = sort
                };

                var result = await _mediator.Send(query);

                return Ok(result);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
        }
    }
}

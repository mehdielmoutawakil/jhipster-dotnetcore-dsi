using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using <%= namespace %>.Domain.Entities;
using <%= namespace %>.Dto;
using <%= namespace %>.Infrastructure.Data;


namespace <%= namespace %>.Application.Queries
{
    class UserSearchQueryHandler : IRequestHandler<UserSearchQuery, PaginatedResult<UserDetailDto>>
    {
        private readonly ApplicationDatabaseContext _context;


        public UserSearchQueryHandler(ApplicationDatabaseContext context)
        {
            _context = context;
        }

        public async Task<PaginatedResult<UserDetailDto>> Handle(UserSearchQuery request, CancellationToken cancellationToken)
        {
            IQueryable<User> query = _context.Users.AsQueryable();
        
            // Apply filters
            foreach (var filter in request.Filters)
            {
                query = FilterHelper.ApplyFilter(query, filter);
            }
        
            // Apply sorting
            query = SortHelper.ApplySort(query, request.Sort);
        
            // Apply pagination
            query = PagingHelper.ApplyPaging(query, request.PageNumber, request.PageSize);
        
            // Get total data
            var totalCount = await query.CountAsync(cancellationToken);
        
            // Get data
            var items = await query
                .Select(u => new UserDetailDto
                {
                    Id = u.Id,
                    FirstName = u.FirstName,
                    LastName = u.LastName,
                    Activated = u.Activated,
                    Email = u.Email,
                    CreatedBy = u.CreatedBy,
                    LangKey = u.LangKey,
                    Login = u.Login,
                    Position = new PositionDto
                    {
                        Id = u.Position.Id,
                        Name = u.Position.Name,
                        IsAdmin = u.Position.IsAdmin,
                        Permissions = u.Position.PositionPermissions
                        .Select(pp => pp.Permission.Name)
                        .ToArray()
                    }
                })
                .ToListAsync(cancellationToken);
        
            // Return result
            return new PaginatedResult<UserDetailDto>
            {
                Data = items,
                TotalCount = totalCount
            };
        }
    }
}

<%#
 Copyright 2019-2024 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using <%= namespace %>.Domain.Entities;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;
using Serilog;
using Microsoft.EntityFrameworkCore;
using <%= namespace %>.Infrastructure.Data;

namespace <%= namespace %>.Configuration;

public static class IdentityConfiguration
{
    public static IApplicationBuilder UseApplicationIdentity(this IApplicationBuilder builder)
    {
        using (var scope = builder.ApplicationServices.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<User>>();
            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<Role>>();

            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDatabaseContext>();

            // SeedRoles(roleManager).Wait();
            
            // Run permissions seeder
            SeedPermissions(dbContext).Wait();

            // Run menu navigations seeder
            SeedNavMenus(dbContext).Wait();

            // Run users seeder
            SeedUsers(userManager).Wait();


            // SeedUserRoles(userManager).Wait();
        }

        return builder;
    }


    private static IEnumerable<Role> Roles()
    {
        return new List<Role>
        {
            new Role {Id = "role_admin", Name = "ROLE_ADMIN"},
            new Role {Id = "role_user",Name = "ROLE_USER"}
        };
    }

    private static IEnumerable<User> Users()
    {
        return new List<User>
        {
            new User
            {
                Id = "user-0",
                UserName = "admin",
                PasswordHash = "$2a$10$mE.qmcV0mFU5NcKh73TZx.z4ueI/.bDWbj0T1BYyqP481kGGarKLG",
                FirstName = "",
                LastName = "admin",
                Email = "admin@localhost",
                Activated = true,
                LangKey = "en",
                Position = new Position {Name = "ADMIN"}
            },
            new User
            {
                Id = "user-1",
                UserName = "user",
                PasswordHash = "$2a$10$j8S5d7Sr7.8VTOYNviDPOeWX8KcYILUVJBsYV83Y5NtECayypx9lO",
                FirstName = "user",
                LastName = "User",
                Email = "user@localhost",
                Activated = true,
                LangKey = "en",
                Position = new Position {Name = "USER"}
            }
        };
    }

    private static IEnumerable<NavMenu> NavMenus()
    {
        return new List<NavMenu>
        {
            new NavMenu {Title = "Gestion", Type = "collapsable", Icon = "heroicons_outline:home", Link = "", Parent = null, ShouldHave = null},
            new NavMenu {Title = "Paramètrage", Type = "collapsable", Icon = "heroicons_outline:cog", Link = "", Parent = null, ShouldHave = null},

            new NavMenu {Title = "Roles & permissions", Type = "basic", Icon = "heroicons_outline:lock-closed", Link = "roles", Parent = new NavMenu {Title = "Paramètrage"}, ShouldHave = ["Position.read"]},

            new NavMenu {Title = "Utilisateurs", Type = "basic", Icon = "heroicons_outline:users", Link = "users", Parent = new NavMenu {Title = "Paramètrage"}, ShouldHave = ["User.read"]},
        };
    }

    private static IEnumerable<Permission> Permissions()
    {
        return new List<Permission>
            {
                new Permission {Name = "User.read"},
                new Permission {Name = "User.write"},
                new Permission {Name = "User.delete"},
    
                new Permission {Name = "Position.read"},
                new Permission {Name = "Position.write"},
                new Permission {Name = "Position.delete"},
            };
    }
    

    private static IDictionary<string, string[]> UserRoles()
    {
        return new Dictionary<string, string[]>
        {
            { "user-0", new[] {"ROLE_ADMIN", "ROLE_USER"}},
            { "user-2", new[] {"ROLE_ADMIN", "ROLE_USER"}},
            { "user-3", new[] {"ROLE_USER"}}
        };
    }

    private static async Task SeedRoles(RoleManager<Role> roleManager)
    {
        foreach (var role in Roles())
        {
            var dbRole = await roleManager.FindByNameAsync(role.Name);
            if (dbRole == null)
            {
                try
                {
                    await roleManager.CreateAsync(role);
                }
                catch (Exception e)
                {
                    Log.ForContext(typeof(IdentityConfiguration)).Warning(e,
                        "Tests are running in parallel, take care of database race conditions");

                    await roleManager.CreateAsync(role);
                }
            }
            else
            {
                await roleManager.UpdateAsync(dbRole);
            }
        }
    }

    private static async Task SeedPermissions(ApplicationDatabaseContext databaseContext)
    {
        foreach (var permission in Permissions())
        {
            var dbPermission = await databaseContext.Permissions.FirstOrDefaultAsync(p => p.Name == permission.Name);

            if (dbPermission == null)
            {
                await databaseContext.Permissions.AddAsync(permission);
            }
            else
            {
                databaseContext.Permissions.Update(dbPermission);
            }
        }
    }

    private static async Task SeedNavMenus(ApplicationDatabaseContext databaseContext)
    {
        foreach (NavMenu navmenu in NavMenus())
        {
            try
            {
                NavMenu dbNavMenu = await databaseContext.NavMenus.FirstOrDefaultAsync(nav => nav.Title == navmenu.Title);
                NavMenu dbNavMenuParent = null;


                if (navmenu.Parent != null)
                {
                    navmenu.Parent = await databaseContext.NavMenus.FirstOrDefaultAsync(nav => nav.Title == navmenu.Parent.Title);
                }

                if (dbNavMenu == null)
                {
                    await databaseContext.NavMenus.AddAsync(navmenu);
                }
                else
                {
                    databaseContext.NavMenus.Update(dbNavMenu);
                }

                databaseContext.SaveChanges();
            }
            catch (Exception e)
            {
                Log.ForContext(typeof(IdentityConfiguration)).Warning(e,
                    "Tests are running in parallel, take care of database race conditions");
            }
        }
    }


    private static async Task SeedUsers(UserManager<User> userManager)
    {
        foreach (var user in Users())
        {
            var dbUser = await userManager.FindByIdAsync(user.Id);
            if (dbUser == null)
            {
                try
                {
                    await userManager.CreateAsync(user);
                }
                catch (Exception e)
                {
                    Log.ForContext(typeof(IdentityConfiguration)).Warning(e,
                        "Tests are running in parallel, take care of database race conditions");

                    await userManager.CreateAsync(user);
                }
            }
            else
            {
                await userManager.UpdateAsync(dbUser);
            }
        }
    }

    private static async Task SeedUserRoles(UserManager<User> userManager)
    {
        foreach (var (id, roles) in UserRoles())
        {
            try
            {
                var user = await userManager.FindByIdAsync(id);
                await userManager.AddToRolesAsync(user, roles);
            }
            catch (Exception e)
            {
                Log.ForContext(typeof(IdentityConfiguration)).Warning(e,
                    "Tests are running in parallel, take care of database race conditions");

                var user = await userManager.FindByIdAsync(id);
                await userManager.AddToRolesAsync(user, roles);
            }
        }
    }
}

<%#
 Copyright 2019-2024 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using <%= namespace %>.Domain.Entities;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;
using Serilog;
using Microsoft.EntityFrameworkCore;
using <%= namespace %>.Infrastructure.Data;
using System.Linq;

namespace <%= namespace %>.Configuration;

public static class IdentityConfiguration
{
    public static IApplicationBuilder UseApplicationIdentity(this IApplicationBuilder builder)
    {
        using (var scope = builder.ApplicationServices.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<User>>();
            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<Role>>();

            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDatabaseContext>();

            // Run permissions seeder
            SeedPermissions(dbContext).Wait();

            // Run menu navigations seeder
            SeedNavMenus(dbContext).Wait();

            // Run users seeder
            SeedUsers(userManager).Wait();
        }

        return builder;
    }

    /// <summary>
    /// Preparer users data
    /// </summary>
    /// <returns></returns>
    private static IEnumerable<User> Users()
    {
        return new List<User>
        {
            new User
            {
                Id = "user-0",
                UserName = "admin",
                PasswordHash = "$2y$10$cKmVx7svfQPPCpaQ3nKY.ekRottKEUjIDfRAe0rdFxYKks4qJHqlG",
                FirstName = "admin",
                LastName = "admin",
                Email = "admin@localhost",
                Activated = true,
                LangKey = "en",
                Position = new Position {Name = "ADMIN", IsAdmin = true}
            },
            new User
            {
                Id = "user-1",
                UserName = "user",
                PasswordHash = "$2y$10$N.Xryf511mzdFPYmwOipE.hOgXfR/X5Ui/t6uWshXplfcoc3xkT7W",
                FirstName = "user",
                LastName = "User",
                Email = "user@localhost",
                Activated = true,
                LangKey = "en",
                Position = new Position {Name = "USER", IsAdmin = false}
            }
        };
    }

    /// <summary>
    /// Preparer navigation menu data
    /// </summary>
    /// <returns></returns>
    private static async Task<IEnumerable<NavMenu>> NavMenusAsync(ApplicationDatabaseContext databaseContext)
    {
        List<NavMenu> navMenus = new List<NavMenu>
        {
            new NavMenu {Title = "Management", Type = "collapsable", Icon = "heroicons_outline:home", Link = "", Parent = null, ShouldHave = null},
            new NavMenu {Title = "Settings", Type = "collapsable", Icon = "heroicons_outline:cog", Link = "", Parent = null, ShouldHave = null},
            new NavMenu {Title = "Position", Type = "basic", Icon = "heroicons_outline:lock-closed", Link = "Position", Parent = new NavMenu {Title = "Settings"}, ShouldHave = ["Position.Read"]},
            new NavMenu {Title = "User", Type = "basic", Icon = "heroicons_outline:users", Link = "User", Parent = new NavMenu {Title = "Settings"}, ShouldHave = ["User.Read"]},
        };
        
        // List of entity names to exclude from permission generation
        var excludedEntities = new[] {
            nameof(Role),
            nameof(UserRole),
            nameof(IdentityUserClaim<string>),
            nameof(IdentityUserLogin<string>),
            nameof(IdentityRoleClaim<string>),
            nameof(IdentityUserToken<string>),
            nameof(NavMenu),
            nameof(Permission),
            nameof(Position),
            nameof(User),
            nameof(PositionPermission),
            "IdentityUserToken`1",
            "IdentityUserLogin`1",
            "IdentityUserClaim`1",
            "IdentityRoleClaim`1"
        };
        
        // Get all entity types in the model
        var entityTypes = databaseContext.Model.GetEntityTypes()
            .Select(e => e.ClrType.Name)
            .Where(name => !excludedEntities.Contains(name)) // Exclude specified entities
            .ToList();
        
        // Retrieve existing navmenus from the database
        var existingNavMenus = await databaseContext.NavMenus.ToListAsync();
        
        // Add new nav menus based on entity types, excluding those already present
        foreach (var entity in entityTypes)
        {
            if (!existingNavMenus.Any(nav => nav.Title == entity))
            {
                navMenus.Add(new NavMenu
                {
                    Title = entity,
                    Type = "basic",
                    Icon = "heroicons_outline:document",
                    Link = entity,
                    Parent = null,
                    ShouldHave = [$"{entity}.Read"] // Example permission
                });
            }
        }
        
        return navMenus;
    }

    /// <summary>
    /// Preparer permissions data
    /// </summary>
    /// <returns></returns>
    private static IEnumerable<Permission> Permissions(ApplicationDatabaseContext databaseContext)
    {
        // Define the possible actions
        var actions = new[] { "Read", "Write", "Delete" };

        // List of entity names to exclude from permission generation
        var excludedEntities = new[] {
            nameof(Role),
            nameof(UserRole),
            nameof(IdentityUserClaim<string>),
            nameof(IdentityUserLogin<string>),
            nameof(IdentityRoleClaim<string>),
            nameof(IdentityUserToken<string>),
            nameof(NavMenu),
            nameof(Permission),
            nameof(PositionPermission),
            "IdentityUserToken`1",
            "IdentityUserLogin`1",
            "IdentityUserClaim`1",
            "IdentityRoleClaim`1"
        };

        // Get all entity types in the model
        var entityTypes = databaseContext.Model.GetEntityTypes()
            .Select(e => e.ClrType.Name)
            .Where(name => !excludedEntities.Contains(name)) // Exclude specified entities
            .ToList();

        // Retrieve existing permissions from the database (in a real migration, this step is illustrative)

        var existingPermissions = databaseContext.Permissions.ToList();

        // Generate permissions
        return entityTypes
            .SelectMany(entity => actions, (entity, action) => new Permission
            {
                Group = entity,
                Name = $"{entity}.{action}"
            })
            .Where(p => !existingPermissions.Any(ep => ep.Name == p.Name && ep.Group == p.Group)) // Filter out existing permissions
            .ToArray();
    }
    
    /// <summary>
    /// Launch permissions seed data
    /// </summary>
    /// <returns></returns>
    private static async Task SeedPermissions(ApplicationDatabaseContext databaseContext)
    {
        await databaseContext.Permissions.AddRangeAsync(Permissions(databaseContext));
        databaseContext.SaveChanges();
    }

    /// <summary>
    /// Launch navigation menu seed data
    /// </summary>
    /// <returns></returns>
    private static async Task SeedNavMenus(ApplicationDatabaseContext databaseContext)
    {
        foreach (NavMenu navmenu in await NavMenusAsync(databaseContext))
        {
            try
            {
                NavMenu dbNavMenu = await databaseContext.NavMenus.FirstOrDefaultAsync(nav => nav.Title == navmenu.Title);
                NavMenu dbNavMenuParent = null;

                if (navmenu.Parent != null)
                {
                    navmenu.Parent = await databaseContext.NavMenus.FirstOrDefaultAsync(nav => nav.Title == navmenu.Parent.Title);
                }

                if (dbNavMenu == null)
                {
                    await databaseContext.NavMenus.AddAsync(navmenu);
                }
                else
                {
                    databaseContext.NavMenus.Update(dbNavMenu);
                }

                databaseContext.SaveChanges();
            }
            catch (Exception e)
            {
                Log.ForContext(typeof(IdentityConfiguration)).Warning(e,
                    "Tests are running in parallel, take care of database race conditions");
            }
        }
    }

    /// <summary>
    /// Launch users seed data
    /// </summary>
    /// <returns></returns>
    private static async Task SeedUsers(UserManager<User> userManager)
    {
        foreach (var user in Users())
        {
            var dbUser = await userManager.FindByIdAsync(user.Id);
            if (dbUser == null)
            {
                try
                {
                    await userManager.CreateAsync(user);
                }
                catch (Exception e)
                {
                    Log.ForContext(typeof(IdentityConfiguration)).Warning(e,
                        "Tests are running in parallel, take care of database race conditions");

                    await userManager.CreateAsync(user);
                }
            }
            else
            {
                await userManager.UpdateAsync(dbUser);
            }
        }
    }
}

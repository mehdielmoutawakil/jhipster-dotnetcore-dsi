using MediatR;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using <%= namespace %>.Domain.Entities;
using <%= namespace %>.Dto;
using <%= namespace %>.Infrastructure.Data;

namespace <%= namespace %>.Application.Queries
{
    class PositionSearchQueryHandler : IRequestHandler<PositionSearchQuery, PaginatedResult<PositionDto>>
    {
        private readonly ApplicationDatabaseContext _context;

        public PositionSearchQueryHandler(ApplicationDatabaseContext context)
        {
            _context = context;
        }

        public async Task<PaginatedResult<PositionDto>> Handle(PositionSearchQuery request, CancellationToken cancellationToken)
        {
            IQueryable<Position> query = _context.Positions.AsQueryable();
        
            // Apply filters
            foreach (var filter in request.Filters)
            {
                query = FilterHelper.ApplyFilter(query, filter);
            }
        
            // Apply sorting
            query = SortHelper.ApplySort(query, request.Sort);
        
            // Apply pagination
            query = PagingHelper.ApplyPaging(query, request.PageNumber, request.PageSize);
        
            // Get total data
            var totalCount = await query.CountAsync(cancellationToken);
        
            // Get data
            var items = await query
                .Select(p => new PositionDto
                {
                    Id = p.Id,
                    Name = p.Name,
                    IsAdmin = p.IsAdmin,
                    Permissions = p.PositionPermissions
                    .Select(pp => pp.Permission.Name)
                    .ToArray()
                })
                .ToListAsync(cancellationToken);
        
            // Return result
            return new PaginatedResult<PositionDto>
            {
                Data = items,
                TotalCount = totalCount
            };
        }
    }
}
